Script started on Mon 18 Apr 2016 07:02:17 PM EDT
mjd85@boole:~/Documents/214/code/09/java$ j cat Max.java
/* Max.java uses the Java Collection Framework
 * to explore operations on a linked list
 *
 * Begun By: Serita Nelesen
 * Completed By: Mark Davis
 * Date: April 15, 2016
 */

import java.util.LinkedList;
import java.util.Iterator;
import java.util.Collections;


class Max{

    ////////////////////////////////////////////////////
    // print() prints elements in a list             ///
    // Receive: aList, a list                        ///
    // Output: the values of a list, with spaces     ///
    ////////////////////////////////////////////////////
    public static void print(LinkedList<Integer> aList)
	{
	Iterator<Integer> listIterator = aList.iterator(); //iterator for traversing a list
	while (listIterator.hasNext()) { //while there is another node
		System.out.print(listIterator.next() + " "); //print its value
	}
	System.out.print('\n'); //new line
	}

    ////////////////////////////////////////////////////
    // main() tests print() and finding the max      ///
    // Receive: -                                    ///
    // Output: the values of a list, with spaces     ///
    //         the max elements of a list            ///
    ////////////////////////////////////////////////////
    public static void main(String [] args){
	//LinkedList<Integer> list1, list2, list3; //declare list1, list2, list3
	LinkedList<Integer> list1 = new LinkedList<Integer>();
	LinkedList<Integer> list2 = new LinkedList<Integer>();
	LinkedList<Integer> list3 = new LinkedList<Integer>();

	
	list1.add(new Integer(99)); // max is first
	list1.add(new Integer(88)); // 99 88 77 66 55
	list1.add(new Integer(77));
	list1.add(new Integer(66));
	list1.add(new Integer(55));

	list2.add(55);  // max is last
	list2.add(66);  // uses implicit type conversion of int
	list2.add(77);  //     to Integer
	list2.add(88);  // 55 66 77 88 99
	list2.add(99);

	list3.add(55);  // max is in the middle
	list3.add(77);  // implicit type conversion
	list3.add(99);  // 55 77 99 88 66 
	list3.add(88);
	list3.add(66);

	print(list1);
	print(list2);
	print(list3);

	System.out.println("Max of list1: " + Collections.max(list1)); //find max for list1
	System.out.println("Max of list2: " + Collections.max(list2)); //find max for list2
	System.out.println("Max of list3: " + Collections.max(list3)); //find max for list3
    
    }
}
mjd85@boole:~/Documents/214/code/09/java$ cat Max.java[4Pjava Maxc Max.java
mjd85@boole:~/Documents/214/code/09/java$ javac Max.java[2Pcat Max.java[4Pjava Max
99 88 77 66 55 
55 66 77 88 99 
55 77 99 88 66 
Max of list1: 99
Max of list2: 99
Max of list3: 99
mjd85@boole:~/Documents/214/code/09/java$ exit
exit

Script done on Mon 18 Apr 2016 07:02:28 PM EDT
Script started on Mon 18 Apr 2016 07:32:04 PM EDT
mjd85@boole:~/Documents/214/code/09/ada$ cat Ma  max.adb
-- max.adb finds the max of a list of integers. 
-- 
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Mark Davis
-- Date: April 18, 2016
-------------------------------------------------- 
 
with Ada.Text_IO, Ada.Integer_Text_IO, List_Package; 
use Ada.Text_IO, Ada.Integer_Text_IO, List_Package; 
 
procedure Max is 
                              -- define 3 lists 
  List1, List2, List3 : List; 
 
begin 
  Init(List1);                -- initialize them 
  Init(List2); 
  Init(List3); 
 
  Append(99, List1);          -- 99, 88, 77, 66, 55 
  Append(88, List1);          -- max is first 
  Append(77, List1); 
  Append(66, List1); 
  Append(55, List1); 
 
  Append(55, List2);          -- 55, 66, 77, 88, 99 
  Append(66, List2);          -- max is last 
  Append(77, List2); 
  Append(88, List2); 
  Append(99, List2); 
 
  Append(55, List3);          -- 55, 77, 99, 88, 66 
  Append(77, List3);          -- max is in the middle 
  Append(99, List3); 
  Append(88, List3); 
  Append(66, List3); 
 
  Put(List1); New_Line;       -- output the 3 lists 
  Put(List2); New_Line; 
  Put(list3); New_Line; 
                              -- display their maxima 
  Put("The maximum value in list 1 is ");  Put( Max(List1) ); New_Line; 
  Put("The maximum value in list 2 is ");  Put( Max(List2) ); New_Line; 
  Put("The maximum value in list 3 is ");  Put( Max(List3) ); New_Line; 
 
end Max; 

mjd85@boole:~/Documents/214/code/09/ada$ cat list_package.ads
-- list_package.ads declares an Ada linked list and its operations.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Mark Davis
-- Date: April 18, 2016
------------------------------------------------------------------

package List_Package is

  -- the list-type itself (public)
  type List is private;

  -----------------------------------------------------
  -- Initialize a list                                -
  -- Receive: aList, a List.                          -
  -- Pre: aList is uninitialized.                     -
  -- Post: aList%itsFirst == aList%itsLast == NULL && -
  --        aList%itsLength == 0.                     -
  -----------------------------------------------------
  procedure Init(A_List: out List);


  ------------------------------------------------
  -- Is a list empty?                            -
  -- Receive: aList, a List.                     -
  -- Return: true, iff aList contains no values. -
  ------------------------------------------------
  function Empty(A_List: in List) return Boolean;

  -------------------------------------
  -- How many values are in a list?   -
  -- Receive: aList, a List.          -
  -- Return: aList%itsLength.         -
  -------------------------------------
  function Length(A_List : in List) return Integer;


  ----------------------------------------
  -- Append a value to a list.           -
  -- Receive: aValue, an integer,        -
  -- Passback: aList, containing aValue. -
  ----------------------------------------
  procedure Append(A_Value : in Integer; A_List: in out List);


  -------------------------------------
  -- Display the values in a list.    -
  -- Receive: aList, a List.          -
  -- Output: the values in aList.     -
  -------------------------------------

  procedure Put(A_list : in List);

  ---------------------------------------
  -- Find the maximum value in a list.  -
  -- Receive: aList, a List.            -
  -- Return: the maximum value in aList.-
  ---------------------------------------

  function Max(A_List : in List) return integer;

 private
   type List_Node;
   type Node_Ptr is access List_Node;

   type List is
	record
	Its_First : Node_Ptr;
	Its_Last : Node_Ptr;
	Its_Length : Integer;
	end record;

   type List_Node is
	record
	Its_Value : Integer;	
	Its_Next : Node_Ptr;
	end record;

end List_Package;

mjd85@boole:~/Documents/214/code/09/ada$ cat list_package.adb
-- list_package.adb defines Ada linked list operations.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Mark Davis
-- Date: April 18, 2016
-------------------------------------------------------

with Ada.Text_IO, Ada.Integer_Text_IO;
use Ada.Text_IO, Ada.Integer_Text_IO;

package body List_Package is

  -----------------------------------------------------
  -- Initialize a list                                -
  -- Receive: aList, a List.                          -
  -- Pre: aList is uninitialized.                     -
  -- Post: aList%itsFirst == aList%itsLast == NULL && -
  --        aList%itsLength == 0.                     -
  -----------------------------------------------------
  procedure Init(A_List : out List) is
  begin
    A_List.Its_First := null;
    A_List.Its_Last := null;
    A_List.Its_Length := 0;
  end Init;

  ------------------------------------------------
  -- Is a list empty?                            -
  -- Receive: aList, a List.                     -
  -- Return: true, iff aList contains no values. -
  ------------------------------------------------
  function Empty(A_List : in List) return Boolean is
  begin
    return A_List.Its_Length = 0;
  end Empty;

  -------------------------------------
  -- How many values are in a list?   -
  -- Receive: aList, a List.          -
  -- Return: aList%itsLength.         -
  -------------------------------------
  function Length(A_List : in List) return Integer is
  begin
    return A_List.Its_Length;
  end Length;

  ----------------------------------------
  -- Append a value to a list.           -
  -- Receive: aValue, an integer,        -
  -- Passback: aList, containing aValue. -
  ----------------------------------------
  procedure Append(A_Value : in Integer; A_List : in out List) is
    Temp_Ptr : constant Node_Ptr := new List_Node;
  begin
    Temp_Ptr.Its_Value := A_Value;
    Temp_Ptr.Its_Next := null;

    if A_List.Its_Length = 0 then
       A_List.Its_First := Temp_Ptr;
    else
       A_List.Its_Last.Its_Next := Temp_Ptr;
    end if;

    A_List.Its_Last := Temp_Ptr;

    A_List.Its_Length := A_List.Its_Length + 1;
  end Append;

  -------------------------------------
  -- Display the values in a list.    -
  -- Receive: aList, a List.          -
  -- Output: the values in aList.     -
  -------------------------------------

  procedure Put(A_list : in List) is
  	Temp_Ptr : Node_Ptr := A_List.Its_First;
  begin
	while Temp_Ptr /= null loop
		Put(' '); Put(Temp_Ptr.Its_Value);
		Temp_Ptr := Temp_Ptr.Its_Next;
	end loop;
  end Put;

  ---------------------------------------
  -- Find the maximum value in a list.  -
  -- Receive: aList, a List.            -
  -- Return: the maximum value in aList.-
  ---------------------------------------

  function Max(A_List : in List) return integer is
	Temp_Ptr : Node_Ptr := A_List.Its_First;
	Max_Value : integer := -99999;
  begin
	while Temp_Ptr /= null loop
		if Temp_Ptr.Its_Value > Max_Value then
			Max_Value := Temp_Ptr.Its_Value;
		end if;
		Temp_Ptr := Temp_Ptr.Its_Next;
	end loop;
  return Max_Value;
  end Max;
end List_Package;

mjd85@boole:~/Documents/214/code/09/ada$ gnatmake mas.ad    x.adb
gnatmake: "max" up to date.
mjd85@boole:~/Documents/214/code/09/ada$ ./mas x
          99          88          77          66          55
          55          66          77          88          99
          55          77          99          88          66
The maximum value in list 1 is          99
The maximum value in list 2 is          99
The maximum value in list 3 is          99
mjd85@boole:~/Documents/214/code/09/ada$ exit
exit

Script done on Mon 18 Apr 2016 07:32:42 PM EDT
Script started on Tue 19 Apr 2016 06:57:10 PM EDT
mjd85@kay:~/Documents/214/code/09/e-lisp$ ac  cat max.    myLi  list.el
;;; mylist.el is a "module" of list operations.
;;;
;;; Begun by: Dr. Adams, CS 214 at Calvin College.
;;; Completed by: Mark Davis
;;; Date: April 18, 2016

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Max2 finds the maximum of two values.       ;;
;;; Receive: val1, val2, two values.            ;;
;;; PRE: val1 and val2 can be compared using <. ;;
;;; Return: the maximum of val1 and val2.       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun Max2 (val1 val2)
  (if (> val1 val2)
      val1
    val2))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Max finds the maximum value in a list.         ;;
;;; Receive: aList, a list of values.              ;;
;;; PRE: values in aList can be compared using <.  ;;
;;; Return: the maximum value in aList.            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun Max (aList) 
  (if (listp aList)
      (progn
      (if (equal (length aList) 0) nil
        (if (equal (length aList) 1)
	  (car aList)
      (Max2 (car aList) (Max(cdr aList))))))
    nil))











mjd85@kay:~/Documents/214/code/09/e-lisp$ cat max.el
;;; max.el searches a list for its maximum value.
;;;
;;; Begun by: Dr. Adams, CS 214 at Calvin College.
;;; Completed by: Mark Davis
;;; Date: April 18, 2016

(add-to-list 'load-path ".")
("." "/usr/share/emacs24/site-lisp/a2ps" "/etc/emacs24" "/etc/emacs" "/usr/local/share/emacs/24.3/site-lisp" "/usr/local/share/emacs/site-lisp" "/usr/share/emacs24/site-lisp/dictionaries-common" "/usr/share/emacs/site-lisp/autoconf" "/usr/share/emacs/24.3/site-lisp" "/usr/share/emacs/site-lisp" "/usr/share/emacs/24.3/lisp" "/usr/share/emacs/24.3/lisp/vc" ...)



            ; setup load-path to WD
(load "mylist.elc")
t

 
                    ; load module

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; test function Max. ;;
;;;;;;;;;;;;;;;;;;;;;;;;;
(progn
  (let
      ((buf (get-buffer "max.el"))       ; setup for output
       (list1 (list 99 88 77 66 55))     ; max is first
       (list2 (list 55 66 77 88 99))     ; max is last
       (list3 (list 55 77 99 88 66))    ; max in middle
       (list4 (list )))

    (princ list1 buf)                    ; print list1
    (terpri buf)                         ;  and a newline

    (princ list2 buf)                    ; print list2
    (terpri buf)                         ;  and a newline

    (princ list3 buf)                    ; print list3
    (terpri buf)                         ;  and a newline

    (princ list4 buf)                    ; print list4
    (terpri buf)                         ; and a newline
  
    (princ "The max in list 1 is " buf)  ; print the max
    (princ (Max list1) buf)              ;  in list1
    (terpri buf)                         ;  and a newline
    (princ "The max in list 2 is " buf)  ; print the max
    (princ (Max list2) buf)              ;  in list2
    (terpri buf)                         ;  and a newline
    (princ "The max in list 3 is " buf)  ; print the max
    (princ (Max list3) buf)              ;  in list3
    (terpri buf)                       	; and a newline
    (princ "The max in list 4 is " buf) 
    (princ (Max list4) buf)
    (terpri buf)))
(99 88 77 66 55)
(55 66 77 88 99)
(55 77 99 88 66)
nil
The max in list 1 is 99
The max in list 2 is 99
The max in list 3 is 99
The max in list 4 is nil
t











mjd85@kay:~/Documents/214/code/09/e-lisp$ exit
exit

Script done on Tue 19 Apr 2016 06:57:34 PM EDT
Script started on Tue 19 Apr 2016 02:17:01 PM EDT
mjd85@hollerith:~/Documents/214/code/09/ruby$ cat max.rb
# max.rb tests a Ruby linked list.
#
# Begun by: Dr. Adams for CS 214 at Calvin College.
# Completed by: Mark Davis
# Date: April 18, 2016

require './List'

list1 = List.new
list2 = List.new
list3 = List.new

list1.append(99).append(88).append(77).append(66).append(55)
list2.append(55).append(66).append(77).append(88).append(99)
list3.append(55).append(77).append(99).append(88).append(66)

list1.print 
puts
puts "Maximum of list1: #{list1.max}"

list2.print 
puts
puts "Maximum of list2: #{list2.max}"

list3.print 
puts
puts "Maximum of list3: #{list3.max}"

mjd85@hollerith:~/Documents/214/code/09/ruby$ cat List.rb
# List.rb implements a linked list structure in Ruby.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Mark Davis
# Date: April 19, 2016
#######################################################

require 'test/unit/assertions'
include Test::Unit::Assertions

class List

   def initialize
	@first = nil
	@last = nil
	@length = 0
   end

   #accessor for length
   attr_reader :length


   # Am I empty?
   # Return: length == 0
   def empty?
      @length == 0
   end
  
   # append a value to me
   # Receive: value, the item to be appended
   # Postcondition: my last item is value and
   #                 my length is one more than it was
   def append(value)
      newNode = Node.new(value, nil)

      if empty?
         @first = newNode
      else
         @last.next = newNode      
      end

      @last = newNode
      @length += 1
      self
   end


   # print my items
   # Postcondition: my items have been displayed to the screen

   def print
	temp = @first
	while !temp.nil?
	  printf " #{temp.value}"
	  temp = temp.next
	end
   end


   # find my maximum item
   # Return: my maximum item

   def max
	temp = @first
	maxValue = nil
	if !temp.nil? then
		maxValue = temp.value
		temp = temp.next
	end
	while !temp.nil?
	  if temp.value > maxValue then
		maxValue = temp.value
	  end
	  temp = temp.next
	end
	return maxValue
   end

  #class that defines Node
  #has two accessors for instance variables
  class Node
	def initialize(item, link)
		@value = item
		@next = link
	end
	
	attr_reader :value
	attr_accessor :next 
  end

end

mjd85@hollerith:~/Documents/214/code/09/ruby$ ruby max.rub
ruby: No such file or directory -- max.rub (LoadError)
mjd85@hollerith:~/Documents/214/code/09/ruby$ ruby max.rb
 99 88 77 66 55
Maximum of list1: 99
 55 66 77 88 99
Maximum of list2: 99
 55 77 99 88 66
Maximum of list3: 99
mjd85@hollerith:~/Documents/214/code/09/ruby$ git add max.rb
mjd85@hollerith:~/Documents/214/code/09/ruby$ git add List.rb
mjd85@hollerith:~/Documents/214/code/09/ruby$ git commit      exit
git: 'exit' is not a git command. See 'git --help'.

Did you mean this?
	init
mjd85@hollerith:~/Documents/214/code/09/ruby$ exit
exit

Script done on Tue 19 Apr 2016 02:17:33 PM EDT
